name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

jobs:

  mlir-bindings:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-11, windows-2022 ]
        py_version: [ "3.10", "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py_version }}

      - name: Install and configure
        shell: bash
        run: |
          pip install .[test,mlir] -f https://makslevental.github.io/wheels
          configure-mlir-python-utils -y mlir

      - name: Test
        shell: bash
        run: |
          if [ ${{ matrix.os }} == 'windows-2022' ]; then
            pytest -s --ignore-glob=*test_smoke* tests
          else
            pytest --capture=tee-sys --ignore-glob=*test_smoke* tests
          fi

      - name: Test mwe
        shell: bash
        run: |
          python examples/mwe.py

  mlir-bindings-aarch64:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        py_version: [ "3.10", "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install, configure, and test
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu20.04
          dockerRunArgs: --volume "${{ github.workspace }}:/workspace"
          install: |
            
            apt-get update -q -y
            apt-get install -y wget
            
            mkdir -p ~/miniconda3
            wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O miniconda.sh
            bash miniconda.sh -b -u -p /root/miniconda3
            eval "$(/root/miniconda3/bin/conda shell.bash hook)"
            conda init
            conda install -q -y python=${{ matrix.py_version }}

          run: |
            
            eval "$(/root/miniconda3/bin/conda shell.bash hook)"
            
            cd /workspace
            
            pip install .[test,mlir] -f https://makslevental.github.io/wheels
            configure-mlir-python-utils -y mlir
            
            pytest --capture=tee-sys --ignore-glob=*test_smoke* tests
            python examples/mwe.py

  torch-mlir-bindings:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-11, windows-2022 ]
        py_version: [ "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py_version }}

      - name: Install and configure
        shell: bash
        run: |
          pip install .[test,torch-mlir] -f https://llvm.github.io/torch-mlir/package-index -f https://makslevental.github.io/wheels
          configure-mlir-python-utils -y torch_mlir

      - name: Test
        shell: bash
        run: |
          if [ ${{ matrix.os }} == 'windows-2022' ]; then
            pytest --capture=tee-sys tests/test_smoke.py
          else
            pytest --capture=tee-sys tests/test_smoke.py
          fi


  jax-bindings:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-11, windows-2022 ]
        py_version: [ "3.10", "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py_version }}

      - name: Install and configure
        shell: bash
        run: |
          pip install .[test,jax] -f https://makslevental.github.io/wheels
          configure-mlir-python-utils -y jaxlib.mlir

      - name: Test
        shell: bash
        run: |
          if [ ${{ matrix.os }} == 'windows-2022' ]; then
            pytest --capture=tee-sys tests/test_smoke.py
          else
            pytest --capture=tee-sys tests/test_smoke.py
          fi
